{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/misha/Desktop/miauth/pages/me.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useRouter } from 'next/router';\nimport { redirect } from 'next/dist/next-server/server/api-utils';\nexport var __N_SSP = true;\nexport default function Me(_ref) {\n  _s();\n\n  var user = _ref.user;\n  var router = useRouter();\n\n  if (!user) {\n    router.push('/login');\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 10\n  }, this);\n}\n\n_s(Me, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function () {\n  return [useRouter];\n});\n\n_c = Me;\n\nvar _c;\n\n$RefreshReg$(_c, \"Me\");","map":{"version":3,"sources":["/Users/misha/Desktop/miauth/pages/me.jsx"],"names":["React","useRouter","redirect","Me","user","router","push"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,SAASC,QAAT,QAAyB,wCAAzB;;AAEA,eAAe,SAASC,EAAT,OAAsB;AAAA;;AAAA,MAARC,IAAQ,QAARA,IAAQ;AACnC,MAAMC,MAAM,GAAGJ,SAAS,EAAxB;;AACA,MAAI,CAACG,IAAL,EAAW;AACTC,IAAAA,MAAM,CAACC,IAAP,CAAY,QAAZ;AACD;;AACD,sBAAO;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GANuBH,E;UACPF,S;;;KADOE,E","sourcesContent":["import React from 'react'\nimport { useRouter } from 'next/router'\nimport cookie from 'cookie'\nimport { redirect } from 'next/dist/next-server/server/api-utils'\n\nexport default function Me({ user }) {\n  const router = useRouter()\n  if (!user) {\n    router.push('/login')\n  }\n  return <div></div>\n}\n\nexport const getServerSideProps = async ctx => {\n  const redirect = () => {\n    if (res.status === 401) {\n      if (ctx.res) {\n        ctx.res.setHeader('location', '/login')\n        ctx.res.statusCode = 302\n        return { props: {} }\n      }\n    }\n  }\n  // const cookie = ctx.req?.headers.cookie\n  const authToken = cookie.parse(ctx.req.headers.cookie)\n  const verifyed = jsonwebtoken.verify(authToken, this.cookieSecret)\n\n  const user = await database.findById({\n    Model: User,\n    id: verifyed.userId,\n    select: '-password',\n  })\n  if (!user) {\n    redirect()\n  }\n  return { props: { user } }\n\n  return { props: { user: '' } }\n}\n"]},"metadata":{},"sourceType":"module"}