{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport mongoose from 'mongoose';\nconst connection = {\n  isConnected: false\n};\n\nconst connectDb = async () => {\n  if (connection.isConnected) {\n    return;\n  }\n\n  try {\n    const dbConnection = await mongoose.connect('mongodb://localhost:27017/miauth', {\n      useNewUrlParser: true,\n      useUnifiedTopology: true\n    });\n    connection.isConnected = !!dbConnection.connections[0].readyState;\n  } catch (err) {\n    console.error(`error connecting to db ${err.message || err}`);\n  }\n};\n\nclass MongoDatabase {\n  async getAll({\n    Model,\n    filter = false\n  } = {}) {\n    let data = [];\n\n    if (filter) {\n      const {\n        page,\n        perPage,\n        populate,\n        sort\n      } = filter;\n      const options = {\n        page: parseInt(page, 10) || 1,\n        limit: parseInt(perPage, 10) || 10,\n        populate,\n        sort\n      };\n\n      if (filter.field && filter.value) {\n        data = await Model.paginate({\n          [filter.field]: filter.value\n        }, options);\n      } else {\n        data = await Model.paginate({}, options);\n      }\n\n      data = _objectSpread(_objectSpread({}, data), {}, {\n        docs: data.docs.map(record => {\n          return _objectSpread(_objectSpread({}, record._doc), {}, {\n            _id: record._doc._id.toString(),\n            createdAt: record._doc.createdAt.toISOString(),\n            updatedAt: record._doc.updatedAt.toISOString()\n          });\n        })\n      });\n    } else {\n      data = await Model.find().sort('created_at').lean();\n    }\n\n    return data;\n  }\n\n  async updateOne({\n    Model,\n    id,\n    fields\n  }) {\n    const updatedRecord = await Model.updateOne({\n      _id: id\n    }, fields);\n    return updatedRecord;\n  }\n\n  async deleteOne({\n    Model,\n    id\n  }) {\n    return await Model.findByIdAndDelete(id);\n  }\n\n  async createOne({\n    Model,\n    fields\n  }) {\n    const record = new Model(_objectSpread({}, fields));\n    await record.save();\n    return record;\n  }\n\n  async findById({\n    Model,\n    id\n  }) {\n    const record = await Model.findById(id).lean();\n\n    if (!record) {\n      throw new Error('Not found');\n    }\n\n    return record;\n  }\n\n  async findOne({\n    Model,\n    field\n  }) {\n    const record = await Model.findOne({\n      [field.field]: field.value\n    });\n    return record;\n  }\n\n}\n\nclass MongoDatabaseProxy {\n  constructor(connectDb) {\n    this.mongoDatabase = new MongoDatabase();\n    this.connectDb = connectDb;\n  }\n\n  async getAll(...props) {\n    await this.connectDb();\n    return await this.mongoDatabase.getAll(...props);\n  }\n\n  async updateOne(...props) {\n    await this.connectDb();\n    return await this.mongoDatabase.updateOne(...props);\n  }\n\n  async deleteOne(...props) {\n    await this.connectDb();\n    return await this.mongoDatabase.deleteOne(...props);\n  }\n\n  async createOne(...props) {\n    await this.connectDb();\n    return await this.mongoDatabase.createOne(...props);\n  }\n\n  async findById(...props) {\n    await this.connectDb();\n    return await this.mongoDatabase.findById(...props);\n  }\n\n  async findOne(...props) {\n    await this.connectDb();\n    return await this.mongoDatabase.findOne(...props);\n  }\n\n}\n\nconst mongoDatabase = new MongoDatabaseProxy(connectDb);\nexport { mongoDatabase };","map":{"version":3,"sources":["/Users/misha/Desktop/miauth/core/Database/Mongo.js"],"names":["mongoose","connection","isConnected","connectDb","dbConnection","connect","useNewUrlParser","useUnifiedTopology","connections","readyState","err","console","error","message","MongoDatabase","getAll","Model","filter","data","page","perPage","populate","sort","options","parseInt","limit","field","value","paginate","docs","map","record","_doc","_id","toString","createdAt","toISOString","updatedAt","find","lean","updateOne","id","fields","updatedRecord","deleteOne","findByIdAndDelete","createOne","save","findById","Error","findOne","MongoDatabaseProxy","constructor","mongoDatabase","props"],"mappings":"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","sourcesContent":["import mongoose from 'mongoose'\n\nconst connection = {\n  isConnected: false,\n}\n\nconst connectDb = async () => {\n  if (connection.isConnected) {\n    return\n  }\n  try {\n    const dbConnection = await mongoose.connect(\n      'mongodb://localhost:27017/miauth',\n      {\n        useNewUrlParser: true,\n        useUnifiedTopology: true,\n      }\n    )\n    connection.isConnected = !!dbConnection.connections[0].readyState\n  } catch (err) {\n    console.error(`error connecting to db ${err.message || err}`)\n  }\n}\n\nclass MongoDatabase {\n  async getAll({ Model, filter = false } = {}) {\n    let data = []\n    if (filter) {\n      const { page, perPage, populate, sort } = filter\n      const options = {\n        page: parseInt(page, 10) || 1,\n        limit: parseInt(perPage, 10) || 10,\n        populate,\n        sort,\n      }\n      if (filter.field && filter.value) {\n        data = await Model.paginate({ [filter.field]: filter.value }, options)\n      } else {\n        data = await Model.paginate({}, options)\n      }\n      data = {\n        ...data,\n        docs: data.docs.map(record => {\n          return {\n            ...record._doc,\n            _id: record._doc._id.toString(),\n            createdAt: record._doc.createdAt.toISOString(),\n            updatedAt: record._doc.updatedAt.toISOString(),\n          }\n        }),\n      }\n    } else {\n      data = await Model.find().sort('created_at').lean()\n    }\n\n    return data\n  }\n  async updateOne({ Model, id, fields }) {\n    const updatedRecord = await Model.updateOne({ _id: id }, fields)\n    return updatedRecord\n  }\n  async deleteOne({ Model, id }) {\n    return await Model.findByIdAndDelete(id)\n  }\n  async createOne({ Model, fields }) {\n    const record = new Model({\n      ...fields,\n    })\n    await record.save()\n    return record\n  }\n  async findById({ Model, id }) {\n    const record = await Model.findById(id).lean()\n    if (!record) {\n      throw new Error('Not found')\n    }\n    return record\n  }\n  async findOne({ Model, field }) {\n    const record = await Model.findOne({ [field.field]: field.value })\n    return record\n  }\n}\n\nclass MongoDatabaseProxy {\n  constructor(connectDb) {\n    this.mongoDatabase = new MongoDatabase()\n    this.connectDb = connectDb\n  }\n  async getAll(...props) {\n    await this.connectDb()\n    return await this.mongoDatabase.getAll(...props)\n  }\n  async updateOne(...props) {\n    await this.connectDb()\n    return await this.mongoDatabase.updateOne(...props)\n  }\n  async deleteOne(...props) {\n    await this.connectDb()\n    return await this.mongoDatabase.deleteOne(...props)\n  }\n  async createOne(...props) {\n    await this.connectDb()\n    return await this.mongoDatabase.createOne(...props)\n  }\n  async findById(...props) {\n    await this.connectDb()\n    return await this.mongoDatabase.findById(...props)\n  }\n  async findOne(...props) {\n    await this.connectDb()\n    return await this.mongoDatabase.findOne(...props)\n  }\n}\n\nconst mongoDatabase = new MongoDatabaseProxy(connectDb)\n\nexport { mongoDatabase }\n"]},"metadata":{},"sourceType":"module"}